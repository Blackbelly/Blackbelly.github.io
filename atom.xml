<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-20T15:26:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PEP-3333 翻译</title>
    <link href="http://yoursite.com/2018/02/20/PEP-3333%20%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2018/02/20/PEP-3333 翻译/</id>
    <published>2018-02-20T13:25:57.000Z</published>
    <updated>2018-02-20T15:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PEP-3333-python-wsgi"><a href="#PEP-3333-python-wsgi" class="headerlink" title="PEP 3333 python wsgi"></a>PEP 3333 python wsgi</h1><p>此外, 为了让已有的或者未来的框架和服务能够轻易实现, wsgi 应该能够很容易的创建 request 的预处理器, response 的 post 处理器, 以及其他基于 wsgi  中间件的部件, 从而使其对于 server 来说像一个 app, 而对于 app 来说又像一个 server</p><h3 id="specification-overview"><a href="#specification-overview" class="headerlink" title="specification overview"></a>specification overview</h3><p>wsgi 接口有两个方面, 服务端(网关端), 以及应用端(框架端). 服务端包含了一个能够调用的对象, 提供给 app 使用, 具体提供的对象取决于 server 端, 假设有些 server 需要 app 的部署者写一些简单的脚本去创建 server 对象, 提供 app 对象. 其他的 server 可以使用具体的配置文件或其他途径去指定 application 应该从哪导入, 或是如何获得.</p><p>此外, 纯 server 和 application 也可以创建中间件去实现这两种特性. 某些组件, 对于其内部的 server 来说, 其行为就像一个 application, 而对于其内部的 application 来说, 又像是一个 server, 并且能够提供拓展的 api 接口, 文本转换, 导航, 或者其他有用的功能</p><h3 id="The-application-framwork-side"><a href="#The-application-framwork-side" class="headerlink" title="The application / framwork side"></a>The application / framwork side</h3><p>application 对象是一个接受两个参数的简单可调用对象. 术语’对象’不应误解为一个对象实例: 函数, 方法, 类, 或者带有 <code>__call__</code> 方法的实例都可以认为是一个 application 对象. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">HELLO_WORLD = b&quot;Hello world!\n&quot;</span><br><span class="line"></span><br><span class="line">def simple_app(environ, start_response):</span><br><span class="line">    &quot;&quot;&quot;Simplest possible application object&quot;&quot;&quot;</span><br><span class="line">    &quot;&quot;&quot;application 对象, 接受两个参数, 能够被调用&quot;&quot;&quot;</span><br><span class="line">    status = &apos;200 OK&apos;</span><br><span class="line">    response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    return [HELLO_WORLD]</span><br><span class="line"></span><br><span class="line">class AppClass:</span><br><span class="line">    &quot;&quot;&quot;Produce the same output, but using a class</span><br><span class="line"></span><br><span class="line">    (Note: &apos;AppClass&apos; is the &quot;application&quot; here, so calling it</span><br><span class="line">    returns an instance of &apos;AppClass&apos;, which is then the iterable</span><br><span class="line">    return value of the &quot;application callable&quot; as required by</span><br><span class="line">    the spec.</span><br><span class="line"></span><br><span class="line">    If we wanted to use *instances* of &apos;AppClass&apos; as application</span><br><span class="line">    objects instead, we would have to implement a &apos;__call__&apos;</span><br><span class="line">    method, which would be invoked to execute the application,</span><br><span class="line">    and we would need to create an instance for use by the</span><br><span class="line">    server or gateway.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, environ, start_response):</span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.start = start_response</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        status = &apos;200 OK&apos;</span><br><span class="line">        response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class="line">        self.start(status, response_headers)</span><br><span class="line">        yield HELLO_WORLD</span><br></pre></td></tr></table></figure><h3 id="The-Server-Gateway-Side"><a href="#The-Server-Gateway-Side" class="headerlink" title="The Server / Gateway Side"></a>The Server / Gateway Side</h3><p>server or gateway 为 http client 的每个请求调起一次 application. 下面有个简单的 CGI gateway, 实现了一个带有 application 对象的函数. 需要注意的是这个简单例子的 error handle 十分有限, 默认会将未捕获到的异常抛出为 <code>sys.stderr</code> , 并通过 web server 记录日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line">enc, esc = sys.getfilesystemencoding(), &apos;surrogateescape&apos;</span><br><span class="line"></span><br><span class="line">def unicode_to_wsgi(u):</span><br><span class="line">    # Convert an environment variable to a WSGI &quot;bytes-as-unicode&quot; string</span><br><span class="line">    return u.encode(enc, esc).decode(&apos;iso-8859-1&apos;)</span><br><span class="line"></span><br><span class="line">def wsgi_to_bytes(s):</span><br><span class="line">    return s.encode(&apos;iso-8859-1&apos;)</span><br><span class="line"></span><br><span class="line">def run_with_cgi(application):</span><br><span class="line">    environ = &#123;k: unicode_to_wsgi(v) for k,v in os.environ.items()&#125;</span><br><span class="line">    environ[&apos;wsgi.input&apos;]        = sys.stdin.buffer</span><br><span class="line">    environ[&apos;wsgi.errors&apos;]       = sys.stderr</span><br><span class="line">    environ[&apos;wsgi.version&apos;]      = (1, 0)</span><br><span class="line">    environ[&apos;wsgi.multithread&apos;]  = False</span><br><span class="line">    environ[&apos;wsgi.multiprocess&apos;] = True</span><br><span class="line">    environ[&apos;wsgi.run_once&apos;]     = True</span><br><span class="line"></span><br><span class="line">    if environ.get(&apos;HTTPS&apos;, &apos;off&apos;) in (&apos;on&apos;, &apos;1&apos;):</span><br><span class="line">        environ[&apos;wsgi.url_scheme&apos;] = &apos;https&apos;</span><br><span class="line">    else:</span><br><span class="line">        environ[&apos;wsgi.url_scheme&apos;] = &apos;http&apos;</span><br><span class="line"></span><br><span class="line">    headers_set = []</span><br><span class="line">    headers_sent = []</span><br><span class="line"></span><br><span class="line">    def write(data):</span><br><span class="line">        out = sys.stdout.buffer</span><br><span class="line"></span><br><span class="line">        if not headers_set:</span><br><span class="line">             raise AssertionError(&quot;write() before start_response()&quot;)</span><br><span class="line"></span><br><span class="line">        elif not headers_sent:</span><br><span class="line">             # Before the first output, send the stored headers</span><br><span class="line">             status, response_headers = headers_sent[:] = headers_set</span><br><span class="line">             out.write(wsgi_to_bytes(&apos;Status: %s\r\n&apos; % status))</span><br><span class="line">             for header in response_headers:</span><br><span class="line">                 out.write(wsgi_to_bytes(&apos;%s: %s\r\n&apos; % header))</span><br><span class="line">             out.write(wsgi_to_bytes(&apos;\r\n&apos;))</span><br><span class="line"></span><br><span class="line">        out.write(data)</span><br><span class="line">        out.flush()</span><br><span class="line"></span><br><span class="line">    def start_response(status, response_headers, exc_info=None):</span><br><span class="line">        if exc_info:</span><br><span class="line">            try:</span><br><span class="line">                if headers_sent:</span><br><span class="line">                    # Re-raise original exception if headers sent</span><br><span class="line">                    raise exc_info[1].with_traceback(exc_info[2])</span><br><span class="line">            finally:</span><br><span class="line">                exc_info = None     # avoid dangling circular ref</span><br><span class="line">        elif headers_set:</span><br><span class="line">            raise AssertionError(&quot;Headers already set!&quot;)</span><br><span class="line"></span><br><span class="line">        headers_set[:] = [status, response_headers]</span><br><span class="line"></span><br><span class="line">        # Note: error checking on the headers should happen here,</span><br><span class="line">        # *after* the headers are set.  That way, if an error</span><br><span class="line">        # occurs, start_response can only be re-called with</span><br><span class="line">        # exc_info set.</span><br><span class="line"></span><br><span class="line">        return write</span><br><span class="line"></span><br><span class="line">    result = application(environ, start_response)</span><br><span class="line">    try:</span><br><span class="line">        for data in result:</span><br><span class="line">            if data:    # don&apos;t send headers until body appears</span><br><span class="line">                write(data)</span><br><span class="line">        if not headers_sent:</span><br><span class="line">            write(&apos;&apos;)   # send headers now if body was empty</span><br><span class="line">    finally:</span><br><span class="line">        if hasattr(result, &apos;close&apos;):</span><br><span class="line">            result.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PEP-3333-python-wsgi&quot;&gt;&lt;a href=&quot;#PEP-3333-python-wsgi&quot; class=&quot;headerlink&quot; title=&quot;PEP 3333 python wsgi&quot;&gt;&lt;/a&gt;PEP 3333 python wsgi&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/20/hello-world/"/>
    <id>http://yoursite.com/2018/02/20/hello-world/</id>
    <published>2018-02-20T12:28:39.000Z</published>
    <updated>2018-02-20T15:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
