{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7476b3d8288287c81f40af31e138b1b805886a29","modified":1519139036000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1519122692000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1519122692000},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1519122692000},{"_id":"themes/apollo/_config.yml","hash":"34a50bae0b6bb804abe69f6667cc5e7e3f7f9166","modified":1519142694000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1519122692000},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1519122692000},{"_id":"source/_posts/.DS_Store","hash":"bf02cb66e2def57e7f222d79e9f7d63ff1778ee9","modified":1519139974000},{"_id":"source/_posts/PEP-3333 翻译.md","hash":"0d6924878199effc6bbe21b42b183951ff5e710f","modified":1519140370000},{"_id":"source/_posts/hello-world.md","hash":"8e4892f1ce114fd6e2ef257bbac44a2179e8ed32","modified":1519140529000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519122692000},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1519122692000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519122690000},{"_id":"themes/apollo/.git/index","hash":"94d6b1fafb8d9369875fa659260a53be54ca5c24","modified":1519122692000},{"_id":"themes/apollo/.git/packed-refs","hash":"53b52c4c3ec6eec8c00208d4008b072952b247e4","modified":1519122692000},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1519122692000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1519122692000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1519122692000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1519122692000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1519122692000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1519122692000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1519122692000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1519122692000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519122690000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519122690000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519122690000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"819f2d9a208d79dbafe482d5a1020f1fbb06d216","modified":1519122692000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1519122692000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1519122692000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1519122692000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1519122692000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1519122692000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1519122692000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1519122692000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1519122692000},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1519122692000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1519122692000},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1519122692000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1519122692000},{"_id":"themes/apollo/.git/objects/pack/pack-b6dc11fc263b9f99026549261912392ab1b3ea89.idx","hash":"be5d9ce5e2c3dbdb2e264c685bd893b44133d511","modified":1519122692000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"e1ff663b08979644efba5f9911db684e916041b3","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1519122692000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1519122692000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"819f2d9a208d79dbafe482d5a1020f1fbb06d216","modified":1519122692000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519122692000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"819f2d9a208d79dbafe482d5a1020f1fbb06d216","modified":1519122692000},{"_id":"themes/apollo/.git/objects/pack/pack-b6dc11fc263b9f99026549261912392ab1b3ea89.pack","hash":"b4a733ba40ed78a6b506441b517150fab86aab65","modified":1519122692000},{"_id":"public/atom.xml","hash":"3d73ae9c6d09ccb24f4ccad8435a5d47eeb03f59","modified":1519142659966},{"_id":"public/sitemap.xml","hash":"b4eee6a7edd476ec2060065eea85ebcf11d4d824","modified":1519142659967},{"_id":"public/2018/02/20/PEP-3333 翻译/index.html","hash":"d0f31955aadb444c7e6147e80d3e5a624a82074f","modified":1519144737136},{"_id":"public/2018/02/20/hello-world/index.html","hash":"e97319a264de1f66f60682ad5eb429d4a375f367","modified":1519144737136},{"_id":"public/archives/index.html","hash":"5f530c116cbad7b7006af3d5a028be0769d4829d","modified":1519142659970},{"_id":"public/archives/2018/index.html","hash":"04d673da7faea766e27c4ac9cfb10bcc8a423a6c","modified":1519142659971},{"_id":"public/archives/2018/02/index.html","hash":"04d673da7faea766e27c4ac9cfb10bcc8a423a6c","modified":1519142659971},{"_id":"public/index.html","hash":"ba5e4d7a07d6c8da530c5b4cb5887fa6439cc0a0","modified":1519142659971},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1519142659973},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1519142659973},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1519142659973},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1519142659973},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1519142659976}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"PEP-3333 翻译","date":"2018-02-20T13:25:57.000Z","_content":"\n\n\n# PEP 3333 python wsgi\n\n\n\n此外, 为了让已有的或者未来的框架和服务能够轻易实现, wsgi 应该能够很容易的创建 request 的预处理器, response 的 post 处理器, 以及其他基于 wsgi  中间件的部件, 从而使其对于 server 来说像一个 app, 而对于 app 来说又像一个 server\n\n\n\n### specification overview\n\nwsgi 接口有两个方面, 服务端(网关端), 以及应用端(框架端). 服务端包含了一个能够调用的对象, 提供给 app 使用, 具体提供的对象取决于 server 端, 假设有些 server 需要 app 的部署者写一些简单的脚本去创建 server 对象, 提供 app 对象. 其他的 server 可以使用具体的配置文件或其他途径去指定 application 应该从哪导入, 或是如何获得.\n\n\n\n此外, 纯 server 和 application 也可以创建中间件去实现这两种特性. 某些组件, 对于其内部的 server 来说, 其行为就像一个 application, 而对于其内部的 application 来说, 又像是一个 server, 并且能够提供拓展的 api 接口, 文本转换, 导航, 或者其他有用的功能\n\n\n\n### The application / framwork side\n\napplication 对象是一个接受两个参数的简单可调用对象. 术语'对象'不应误解为一个对象实例: 函数, 方法, 类, 或者带有 `__call__` 方法的实例都可以认为是一个 application 对象. \n\n\n\n```\nHELLO_WORLD = b\"Hello world!\\n\"\n\ndef simple_app(environ, start_response):\n    \"\"\"Simplest possible application object\"\"\"\n    \"\"\"application 对象, 接受两个参数, 能够被调用\"\"\"\n    status = '200 OK'\n    response_headers = [('Content-type', 'text/plain')]\n    start_response(status, response_headers)\n    return [HELLO_WORLD]\n\nclass AppClass:\n    \"\"\"Produce the same output, but using a class\n\n    (Note: 'AppClass' is the \"application\" here, so calling it\n    returns an instance of 'AppClass', which is then the iterable\n    return value of the \"application callable\" as required by\n    the spec.\n\n    If we wanted to use *instances* of 'AppClass' as application\n    objects instead, we would have to implement a '__call__'\n    method, which would be invoked to execute the application,\n    and we would need to create an instance for use by the\n    server or gateway.\n    \"\"\"\n\n    def __init__(self, environ, start_response):\n        self.environ = environ\n        self.start = start_response\n\n    def __iter__(self):\n        status = '200 OK'\n        response_headers = [('Content-type', 'text/plain')]\n        self.start(status, response_headers)\n        yield HELLO_WORLD\n```\n\n\n\n\n\n### The Server / Gateway Side\n\nserver or gateway 为 http client 的每个请求调起一次 application. 下面有个简单的 CGI gateway, 实现了一个带有 application 对象的函数. 需要注意的是这个简单例子的 error handle 十分有限, 默认会将未捕获到的异常抛出为 `sys.stderr` , 并通过 web server 记录日志\n\n```\nimport os, sys\n\nenc, esc = sys.getfilesystemencoding(), 'surrogateescape'\n\ndef unicode_to_wsgi(u):\n    # Convert an environment variable to a WSGI \"bytes-as-unicode\" string\n    return u.encode(enc, esc).decode('iso-8859-1')\n\ndef wsgi_to_bytes(s):\n    return s.encode('iso-8859-1')\n\ndef run_with_cgi(application):\n    environ = {k: unicode_to_wsgi(v) for k,v in os.environ.items()}\n    environ['wsgi.input']        = sys.stdin.buffer\n    environ['wsgi.errors']       = sys.stderr\n    environ['wsgi.version']      = (1, 0)\n    environ['wsgi.multithread']  = False\n    environ['wsgi.multiprocess'] = True\n    environ['wsgi.run_once']     = True\n\n    if environ.get('HTTPS', 'off') in ('on', '1'):\n        environ['wsgi.url_scheme'] = 'https'\n    else:\n        environ['wsgi.url_scheme'] = 'http'\n\n    headers_set = []\n    headers_sent = []\n\n    def write(data):\n        out = sys.stdout.buffer\n\n        if not headers_set:\n             raise AssertionError(\"write() before start_response()\")\n\n        elif not headers_sent:\n             # Before the first output, send the stored headers\n             status, response_headers = headers_sent[:] = headers_set\n             out.write(wsgi_to_bytes('Status: %s\\r\\n' % status))\n             for header in response_headers:\n                 out.write(wsgi_to_bytes('%s: %s\\r\\n' % header))\n             out.write(wsgi_to_bytes('\\r\\n'))\n\n        out.write(data)\n        out.flush()\n\n    def start_response(status, response_headers, exc_info=None):\n        if exc_info:\n            try:\n                if headers_sent:\n                    # Re-raise original exception if headers sent\n                    raise exc_info[1].with_traceback(exc_info[2])\n            finally:\n                exc_info = None     # avoid dangling circular ref\n        elif headers_set:\n            raise AssertionError(\"Headers already set!\")\n\n        headers_set[:] = [status, response_headers]\n\n        # Note: error checking on the headers should happen here,\n        # *after* the headers are set.  That way, if an error\n        # occurs, start_response can only be re-called with\n        # exc_info set.\n\n        return write\n\n    result = application(environ, start_response)\n    try:\n        for data in result:\n            if data:    # don't send headers until body appears\n                write(data)\n        if not headers_sent:\n            write('')   # send headers now if body was empty\n    finally:\n        if hasattr(result, 'close'):\n            result.close()\n```\n\n\n\n\n\n\n","source":"_posts/PEP-3333 翻译.md","raw":"---\ntitle: PEP-3333 翻译\ndate: 2018-02-20 21:25:57\ntags:\n---\n\n\n\n# PEP 3333 python wsgi\n\n\n\n此外, 为了让已有的或者未来的框架和服务能够轻易实现, wsgi 应该能够很容易的创建 request 的预处理器, response 的 post 处理器, 以及其他基于 wsgi  中间件的部件, 从而使其对于 server 来说像一个 app, 而对于 app 来说又像一个 server\n\n\n\n### specification overview\n\nwsgi 接口有两个方面, 服务端(网关端), 以及应用端(框架端). 服务端包含了一个能够调用的对象, 提供给 app 使用, 具体提供的对象取决于 server 端, 假设有些 server 需要 app 的部署者写一些简单的脚本去创建 server 对象, 提供 app 对象. 其他的 server 可以使用具体的配置文件或其他途径去指定 application 应该从哪导入, 或是如何获得.\n\n\n\n此外, 纯 server 和 application 也可以创建中间件去实现这两种特性. 某些组件, 对于其内部的 server 来说, 其行为就像一个 application, 而对于其内部的 application 来说, 又像是一个 server, 并且能够提供拓展的 api 接口, 文本转换, 导航, 或者其他有用的功能\n\n\n\n### The application / framwork side\n\napplication 对象是一个接受两个参数的简单可调用对象. 术语'对象'不应误解为一个对象实例: 函数, 方法, 类, 或者带有 `__call__` 方法的实例都可以认为是一个 application 对象. \n\n\n\n```\nHELLO_WORLD = b\"Hello world!\\n\"\n\ndef simple_app(environ, start_response):\n    \"\"\"Simplest possible application object\"\"\"\n    \"\"\"application 对象, 接受两个参数, 能够被调用\"\"\"\n    status = '200 OK'\n    response_headers = [('Content-type', 'text/plain')]\n    start_response(status, response_headers)\n    return [HELLO_WORLD]\n\nclass AppClass:\n    \"\"\"Produce the same output, but using a class\n\n    (Note: 'AppClass' is the \"application\" here, so calling it\n    returns an instance of 'AppClass', which is then the iterable\n    return value of the \"application callable\" as required by\n    the spec.\n\n    If we wanted to use *instances* of 'AppClass' as application\n    objects instead, we would have to implement a '__call__'\n    method, which would be invoked to execute the application,\n    and we would need to create an instance for use by the\n    server or gateway.\n    \"\"\"\n\n    def __init__(self, environ, start_response):\n        self.environ = environ\n        self.start = start_response\n\n    def __iter__(self):\n        status = '200 OK'\n        response_headers = [('Content-type', 'text/plain')]\n        self.start(status, response_headers)\n        yield HELLO_WORLD\n```\n\n\n\n\n\n### The Server / Gateway Side\n\nserver or gateway 为 http client 的每个请求调起一次 application. 下面有个简单的 CGI gateway, 实现了一个带有 application 对象的函数. 需要注意的是这个简单例子的 error handle 十分有限, 默认会将未捕获到的异常抛出为 `sys.stderr` , 并通过 web server 记录日志\n\n```\nimport os, sys\n\nenc, esc = sys.getfilesystemencoding(), 'surrogateescape'\n\ndef unicode_to_wsgi(u):\n    # Convert an environment variable to a WSGI \"bytes-as-unicode\" string\n    return u.encode(enc, esc).decode('iso-8859-1')\n\ndef wsgi_to_bytes(s):\n    return s.encode('iso-8859-1')\n\ndef run_with_cgi(application):\n    environ = {k: unicode_to_wsgi(v) for k,v in os.environ.items()}\n    environ['wsgi.input']        = sys.stdin.buffer\n    environ['wsgi.errors']       = sys.stderr\n    environ['wsgi.version']      = (1, 0)\n    environ['wsgi.multithread']  = False\n    environ['wsgi.multiprocess'] = True\n    environ['wsgi.run_once']     = True\n\n    if environ.get('HTTPS', 'off') in ('on', '1'):\n        environ['wsgi.url_scheme'] = 'https'\n    else:\n        environ['wsgi.url_scheme'] = 'http'\n\n    headers_set = []\n    headers_sent = []\n\n    def write(data):\n        out = sys.stdout.buffer\n\n        if not headers_set:\n             raise AssertionError(\"write() before start_response()\")\n\n        elif not headers_sent:\n             # Before the first output, send the stored headers\n             status, response_headers = headers_sent[:] = headers_set\n             out.write(wsgi_to_bytes('Status: %s\\r\\n' % status))\n             for header in response_headers:\n                 out.write(wsgi_to_bytes('%s: %s\\r\\n' % header))\n             out.write(wsgi_to_bytes('\\r\\n'))\n\n        out.write(data)\n        out.flush()\n\n    def start_response(status, response_headers, exc_info=None):\n        if exc_info:\n            try:\n                if headers_sent:\n                    # Re-raise original exception if headers sent\n                    raise exc_info[1].with_traceback(exc_info[2])\n            finally:\n                exc_info = None     # avoid dangling circular ref\n        elif headers_set:\n            raise AssertionError(\"Headers already set!\")\n\n        headers_set[:] = [status, response_headers]\n\n        # Note: error checking on the headers should happen here,\n        # *after* the headers are set.  That way, if an error\n        # occurs, start_response can only be re-called with\n        # exc_info set.\n\n        return write\n\n    result = application(environ, start_response)\n    try:\n        for data in result:\n            if data:    # don't send headers until body appears\n                write(data)\n        if not headers_sent:\n            write('')   # send headers now if body was empty\n    finally:\n        if hasattr(result, 'close'):\n            result.close()\n```\n\n\n\n\n\n\n","slug":"PEP-3333 翻译","published":1,"updated":"2018-02-20T15:26:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvube570000hfqmd8s1vneb","content":"<h1 id=\"PEP-3333-python-wsgi\"><a href=\"#PEP-3333-python-wsgi\" class=\"headerlink\" title=\"PEP 3333 python wsgi\"></a>PEP 3333 python wsgi</h1><p>此外, 为了让已有的或者未来的框架和服务能够轻易实现, wsgi 应该能够很容易的创建 request 的预处理器, response 的 post 处理器, 以及其他基于 wsgi  中间件的部件, 从而使其对于 server 来说像一个 app, 而对于 app 来说又像一个 server</p>\n<h3 id=\"specification-overview\"><a href=\"#specification-overview\" class=\"headerlink\" title=\"specification overview\"></a>specification overview</h3><p>wsgi 接口有两个方面, 服务端(网关端), 以及应用端(框架端). 服务端包含了一个能够调用的对象, 提供给 app 使用, 具体提供的对象取决于 server 端, 假设有些 server 需要 app 的部署者写一些简单的脚本去创建 server 对象, 提供 app 对象. 其他的 server 可以使用具体的配置文件或其他途径去指定 application 应该从哪导入, 或是如何获得.</p>\n<p>此外, 纯 server 和 application 也可以创建中间件去实现这两种特性. 某些组件, 对于其内部的 server 来说, 其行为就像一个 application, 而对于其内部的 application 来说, 又像是一个 server, 并且能够提供拓展的 api 接口, 文本转换, 导航, 或者其他有用的功能</p>\n<h3 id=\"The-application-framwork-side\"><a href=\"#The-application-framwork-side\" class=\"headerlink\" title=\"The application / framwork side\"></a>The application / framwork side</h3><p>application 对象是一个接受两个参数的简单可调用对象. 术语’对象’不应误解为一个对象实例: 函数, 方法, 类, 或者带有 <code>__call__</code> 方法的实例都可以认为是一个 application 对象. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HELLO_WORLD = b&quot;Hello world!\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def simple_app(environ, start_response):</span><br><span class=\"line\">    &quot;&quot;&quot;Simplest possible application object&quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;application 对象, 接受两个参数, 能够被调用&quot;&quot;&quot;</span><br><span class=\"line\">    status = &apos;200 OK&apos;</span><br><span class=\"line\">    response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class=\"line\">    start_response(status, response_headers)</span><br><span class=\"line\">    return [HELLO_WORLD]</span><br><span class=\"line\"></span><br><span class=\"line\">class AppClass:</span><br><span class=\"line\">    &quot;&quot;&quot;Produce the same output, but using a class</span><br><span class=\"line\"></span><br><span class=\"line\">    (Note: &apos;AppClass&apos; is the &quot;application&quot; here, so calling it</span><br><span class=\"line\">    returns an instance of &apos;AppClass&apos;, which is then the iterable</span><br><span class=\"line\">    return value of the &quot;application callable&quot; as required by</span><br><span class=\"line\">    the spec.</span><br><span class=\"line\"></span><br><span class=\"line\">    If we wanted to use *instances* of &apos;AppClass&apos; as application</span><br><span class=\"line\">    objects instead, we would have to implement a &apos;__call__&apos;</span><br><span class=\"line\">    method, which would be invoked to execute the application,</span><br><span class=\"line\">    and we would need to create an instance for use by the</span><br><span class=\"line\">    server or gateway.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, environ, start_response):</span><br><span class=\"line\">        self.environ = environ</span><br><span class=\"line\">        self.start = start_response</span><br><span class=\"line\"></span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        status = &apos;200 OK&apos;</span><br><span class=\"line\">        response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class=\"line\">        self.start(status, response_headers)</span><br><span class=\"line\">        yield HELLO_WORLD</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Server-Gateway-Side\"><a href=\"#The-Server-Gateway-Side\" class=\"headerlink\" title=\"The Server / Gateway Side\"></a>The Server / Gateway Side</h3><p>server or gateway 为 http client 的每个请求调起一次 application. 下面有个简单的 CGI gateway, 实现了一个带有 application 对象的函数. 需要注意的是这个简单例子的 error handle 十分有限, 默认会将未捕获到的异常抛出为 <code>sys.stderr</code> , 并通过 web server 记录日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os, sys</span><br><span class=\"line\"></span><br><span class=\"line\">enc, esc = sys.getfilesystemencoding(), &apos;surrogateescape&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def unicode_to_wsgi(u):</span><br><span class=\"line\">    # Convert an environment variable to a WSGI &quot;bytes-as-unicode&quot; string</span><br><span class=\"line\">    return u.encode(enc, esc).decode(&apos;iso-8859-1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def wsgi_to_bytes(s):</span><br><span class=\"line\">    return s.encode(&apos;iso-8859-1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def run_with_cgi(application):</span><br><span class=\"line\">    environ = &#123;k: unicode_to_wsgi(v) for k,v in os.environ.items()&#125;</span><br><span class=\"line\">    environ[&apos;wsgi.input&apos;]        = sys.stdin.buffer</span><br><span class=\"line\">    environ[&apos;wsgi.errors&apos;]       = sys.stderr</span><br><span class=\"line\">    environ[&apos;wsgi.version&apos;]      = (1, 0)</span><br><span class=\"line\">    environ[&apos;wsgi.multithread&apos;]  = False</span><br><span class=\"line\">    environ[&apos;wsgi.multiprocess&apos;] = True</span><br><span class=\"line\">    environ[&apos;wsgi.run_once&apos;]     = True</span><br><span class=\"line\"></span><br><span class=\"line\">    if environ.get(&apos;HTTPS&apos;, &apos;off&apos;) in (&apos;on&apos;, &apos;1&apos;):</span><br><span class=\"line\">        environ[&apos;wsgi.url_scheme&apos;] = &apos;https&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        environ[&apos;wsgi.url_scheme&apos;] = &apos;http&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    headers_set = []</span><br><span class=\"line\">    headers_sent = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def write(data):</span><br><span class=\"line\">        out = sys.stdout.buffer</span><br><span class=\"line\"></span><br><span class=\"line\">        if not headers_set:</span><br><span class=\"line\">             raise AssertionError(&quot;write() before start_response()&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        elif not headers_sent:</span><br><span class=\"line\">             # Before the first output, send the stored headers</span><br><span class=\"line\">             status, response_headers = headers_sent[:] = headers_set</span><br><span class=\"line\">             out.write(wsgi_to_bytes(&apos;Status: %s\\r\\n&apos; % status))</span><br><span class=\"line\">             for header in response_headers:</span><br><span class=\"line\">                 out.write(wsgi_to_bytes(&apos;%s: %s\\r\\n&apos; % header))</span><br><span class=\"line\">             out.write(wsgi_to_bytes(&apos;\\r\\n&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">        out.write(data)</span><br><span class=\"line\">        out.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    def start_response(status, response_headers, exc_info=None):</span><br><span class=\"line\">        if exc_info:</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                if headers_sent:</span><br><span class=\"line\">                    # Re-raise original exception if headers sent</span><br><span class=\"line\">                    raise exc_info[1].with_traceback(exc_info[2])</span><br><span class=\"line\">            finally:</span><br><span class=\"line\">                exc_info = None     # avoid dangling circular ref</span><br><span class=\"line\">        elif headers_set:</span><br><span class=\"line\">            raise AssertionError(&quot;Headers already set!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        headers_set[:] = [status, response_headers]</span><br><span class=\"line\"></span><br><span class=\"line\">        # Note: error checking on the headers should happen here,</span><br><span class=\"line\">        # *after* the headers are set.  That way, if an error</span><br><span class=\"line\">        # occurs, start_response can only be re-called with</span><br><span class=\"line\">        # exc_info set.</span><br><span class=\"line\"></span><br><span class=\"line\">        return write</span><br><span class=\"line\"></span><br><span class=\"line\">    result = application(environ, start_response)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        for data in result:</span><br><span class=\"line\">            if data:    # don&apos;t send headers until body appears</span><br><span class=\"line\">                write(data)</span><br><span class=\"line\">        if not headers_sent:</span><br><span class=\"line\">            write(&apos;&apos;)   # send headers now if body was empty</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        if hasattr(result, &apos;close&apos;):</span><br><span class=\"line\">            result.close()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PEP-3333-python-wsgi\"><a href=\"#PEP-3333-python-wsgi\" class=\"headerlink\" title=\"PEP 3333 python wsgi\"></a>PEP 3333 python wsgi</h1><p>此外, 为了让已有的或者未来的框架和服务能够轻易实现, wsgi 应该能够很容易的创建 request 的预处理器, response 的 post 处理器, 以及其他基于 wsgi  中间件的部件, 从而使其对于 server 来说像一个 app, 而对于 app 来说又像一个 server</p>\n<h3 id=\"specification-overview\"><a href=\"#specification-overview\" class=\"headerlink\" title=\"specification overview\"></a>specification overview</h3><p>wsgi 接口有两个方面, 服务端(网关端), 以及应用端(框架端). 服务端包含了一个能够调用的对象, 提供给 app 使用, 具体提供的对象取决于 server 端, 假设有些 server 需要 app 的部署者写一些简单的脚本去创建 server 对象, 提供 app 对象. 其他的 server 可以使用具体的配置文件或其他途径去指定 application 应该从哪导入, 或是如何获得.</p>\n<p>此外, 纯 server 和 application 也可以创建中间件去实现这两种特性. 某些组件, 对于其内部的 server 来说, 其行为就像一个 application, 而对于其内部的 application 来说, 又像是一个 server, 并且能够提供拓展的 api 接口, 文本转换, 导航, 或者其他有用的功能</p>\n<h3 id=\"The-application-framwork-side\"><a href=\"#The-application-framwork-side\" class=\"headerlink\" title=\"The application / framwork side\"></a>The application / framwork side</h3><p>application 对象是一个接受两个参数的简单可调用对象. 术语’对象’不应误解为一个对象实例: 函数, 方法, 类, 或者带有 <code>__call__</code> 方法的实例都可以认为是一个 application 对象. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HELLO_WORLD = b&quot;Hello world!\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def simple_app(environ, start_response):</span><br><span class=\"line\">    &quot;&quot;&quot;Simplest possible application object&quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;application 对象, 接受两个参数, 能够被调用&quot;&quot;&quot;</span><br><span class=\"line\">    status = &apos;200 OK&apos;</span><br><span class=\"line\">    response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class=\"line\">    start_response(status, response_headers)</span><br><span class=\"line\">    return [HELLO_WORLD]</span><br><span class=\"line\"></span><br><span class=\"line\">class AppClass:</span><br><span class=\"line\">    &quot;&quot;&quot;Produce the same output, but using a class</span><br><span class=\"line\"></span><br><span class=\"line\">    (Note: &apos;AppClass&apos; is the &quot;application&quot; here, so calling it</span><br><span class=\"line\">    returns an instance of &apos;AppClass&apos;, which is then the iterable</span><br><span class=\"line\">    return value of the &quot;application callable&quot; as required by</span><br><span class=\"line\">    the spec.</span><br><span class=\"line\"></span><br><span class=\"line\">    If we wanted to use *instances* of &apos;AppClass&apos; as application</span><br><span class=\"line\">    objects instead, we would have to implement a &apos;__call__&apos;</span><br><span class=\"line\">    method, which would be invoked to execute the application,</span><br><span class=\"line\">    and we would need to create an instance for use by the</span><br><span class=\"line\">    server or gateway.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, environ, start_response):</span><br><span class=\"line\">        self.environ = environ</span><br><span class=\"line\">        self.start = start_response</span><br><span class=\"line\"></span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        status = &apos;200 OK&apos;</span><br><span class=\"line\">        response_headers = [(&apos;Content-type&apos;, &apos;text/plain&apos;)]</span><br><span class=\"line\">        self.start(status, response_headers)</span><br><span class=\"line\">        yield HELLO_WORLD</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Server-Gateway-Side\"><a href=\"#The-Server-Gateway-Side\" class=\"headerlink\" title=\"The Server / Gateway Side\"></a>The Server / Gateway Side</h3><p>server or gateway 为 http client 的每个请求调起一次 application. 下面有个简单的 CGI gateway, 实现了一个带有 application 对象的函数. 需要注意的是这个简单例子的 error handle 十分有限, 默认会将未捕获到的异常抛出为 <code>sys.stderr</code> , 并通过 web server 记录日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os, sys</span><br><span class=\"line\"></span><br><span class=\"line\">enc, esc = sys.getfilesystemencoding(), &apos;surrogateescape&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def unicode_to_wsgi(u):</span><br><span class=\"line\">    # Convert an environment variable to a WSGI &quot;bytes-as-unicode&quot; string</span><br><span class=\"line\">    return u.encode(enc, esc).decode(&apos;iso-8859-1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def wsgi_to_bytes(s):</span><br><span class=\"line\">    return s.encode(&apos;iso-8859-1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def run_with_cgi(application):</span><br><span class=\"line\">    environ = &#123;k: unicode_to_wsgi(v) for k,v in os.environ.items()&#125;</span><br><span class=\"line\">    environ[&apos;wsgi.input&apos;]        = sys.stdin.buffer</span><br><span class=\"line\">    environ[&apos;wsgi.errors&apos;]       = sys.stderr</span><br><span class=\"line\">    environ[&apos;wsgi.version&apos;]      = (1, 0)</span><br><span class=\"line\">    environ[&apos;wsgi.multithread&apos;]  = False</span><br><span class=\"line\">    environ[&apos;wsgi.multiprocess&apos;] = True</span><br><span class=\"line\">    environ[&apos;wsgi.run_once&apos;]     = True</span><br><span class=\"line\"></span><br><span class=\"line\">    if environ.get(&apos;HTTPS&apos;, &apos;off&apos;) in (&apos;on&apos;, &apos;1&apos;):</span><br><span class=\"line\">        environ[&apos;wsgi.url_scheme&apos;] = &apos;https&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        environ[&apos;wsgi.url_scheme&apos;] = &apos;http&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    headers_set = []</span><br><span class=\"line\">    headers_sent = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def write(data):</span><br><span class=\"line\">        out = sys.stdout.buffer</span><br><span class=\"line\"></span><br><span class=\"line\">        if not headers_set:</span><br><span class=\"line\">             raise AssertionError(&quot;write() before start_response()&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        elif not headers_sent:</span><br><span class=\"line\">             # Before the first output, send the stored headers</span><br><span class=\"line\">             status, response_headers = headers_sent[:] = headers_set</span><br><span class=\"line\">             out.write(wsgi_to_bytes(&apos;Status: %s\\r\\n&apos; % status))</span><br><span class=\"line\">             for header in response_headers:</span><br><span class=\"line\">                 out.write(wsgi_to_bytes(&apos;%s: %s\\r\\n&apos; % header))</span><br><span class=\"line\">             out.write(wsgi_to_bytes(&apos;\\r\\n&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">        out.write(data)</span><br><span class=\"line\">        out.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    def start_response(status, response_headers, exc_info=None):</span><br><span class=\"line\">        if exc_info:</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                if headers_sent:</span><br><span class=\"line\">                    # Re-raise original exception if headers sent</span><br><span class=\"line\">                    raise exc_info[1].with_traceback(exc_info[2])</span><br><span class=\"line\">            finally:</span><br><span class=\"line\">                exc_info = None     # avoid dangling circular ref</span><br><span class=\"line\">        elif headers_set:</span><br><span class=\"line\">            raise AssertionError(&quot;Headers already set!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        headers_set[:] = [status, response_headers]</span><br><span class=\"line\"></span><br><span class=\"line\">        # Note: error checking on the headers should happen here,</span><br><span class=\"line\">        # *after* the headers are set.  That way, if an error</span><br><span class=\"line\">        # occurs, start_response can only be re-called with</span><br><span class=\"line\">        # exc_info set.</span><br><span class=\"line\"></span><br><span class=\"line\">        return write</span><br><span class=\"line\"></span><br><span class=\"line\">    result = application(environ, start_response)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        for data in result:</span><br><span class=\"line\">            if data:    # don&apos;t send headers until body appears</span><br><span class=\"line\">                write(data)</span><br><span class=\"line\">        if not headers_sent:</span><br><span class=\"line\">            write(&apos;&apos;)   # send headers now if body was empty</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        if hasattr(result, &apos;close&apos;):</span><br><span class=\"line\">            result.close()</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","date":"2018-02-20T12:28:39.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-02-20 20:28:39\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-02-20T15:28:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvube5c0001hfqmg9kxlwr7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}